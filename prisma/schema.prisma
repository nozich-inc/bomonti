generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id     String     @id @default(uuid())
  code   String     @unique
  pageId String?
  name   String
  Menu   Menu[]
  User   UserRole[]
  Page   Page?      @relation(fields: [pageId], references: [id])
}

model Page {
  id   String @id @default(uuid())
  code String @unique
  name String
  Menu Menu[]
  Role Role[]
}

model Menu {
  id     String  @id @default(uuid())
  code   String  @unique
  name   String
  parent String?
  page   String?
  role   String?
  order  Int
  icon   String?
  path   String?
  pages  Page?   @relation(fields: [page], references: [id])
  roles  Role?   @relation(fields: [role], references: [id])
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Database {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  host        String
  port        Int
  username    String
  password    String
  schema      String
}
